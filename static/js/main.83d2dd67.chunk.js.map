{"version":3,"sources":["components/HookUseRef.js","components/ClassCreateRef.js","App.js","serviceWorker.js","index.js"],"names":["HookUseRef","useState","setDummyState","divRef","useRef","inputRef","numberRef","useEffect","current","focus","alert","style","color","innerHTML","addEventListener","hoverEffect","outEffect","background","ref","type","onClick","prevState","console","log","ClassCreateRef","props","state","dummyState","createRef","this","setState","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83d2dd67.chunk.js","sourcesContent":["import React, {useState,useEffect,useRef} from 'react'\r\n\r\nfunction HookUseRef() {\r\n\r\n    // const [ ... ] = useState()\r\n    // inital value can be written useRef(initial value)\r\n    const [dummyState, setDummyState]=useState(0)\r\n    const divRef = useRef();\r\n    const inputRef = useRef();\r\n    const numberRef = useRef(100);\r\n\r\n\r\n    // we combine them with ref={} in return\r\n\r\n\r\n    // useEffect method\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n\r\n    }, [])\r\n    useEffect( () => {\r\n        // divRef.current.style.color='red'\r\n        // divRef.current.innerHTML='Hello World'\r\n        if ( numberRef.current < 100 ) {\r\n            alert('numberRef.current is smaller than 100')\r\n            divRef.current.style.color = 'red'\r\n            divRef.current.innerHTML = ' Equality is broken. '\r\n            divRef.current.addEventListener( 'mouseover' , hoverEffect)\r\n            divRef.current.addEventListener( 'mouseout' , outEffect)\r\n        } else if  ( numberRef.current > 100 ) {\r\n            alert('numberRef.current is bigger than 100')\r\n            divRef.current.style.color = 'green'\r\n            divRef.current.innerHTML = ' Equality is broken. '\r\n            divRef.current.style.background = 'yellow'\r\n        }  else {\r\n            // alert('numberRef.current is equal to 100')\r\n            divRef.current.style.color = 'pink'\r\n            divRef.current.innerHTML = ' Reference is equal to 100 '\r\n\r\n        }\r\n    })\r\n    const hoverEffect = () => {\r\n        // alert ('You are over Div')\r\n        divRef.current.style.background = 'lightblue'\r\n    }\r\n    const outEffect = () => {\r\n        // alert ('You are over Div')\r\n        divRef.current.style.background = 'pink'\r\n    }\r\n    return (\r\n        <div>\r\n            <input ref={inputRef} type=\"text\"/>\r\n            <br/><br/>\r\n            Value : {numberRef.current}\r\n            <br/><br/>\r\n            <button onClick = { ()=> {\r\n                                        numberRef.current +=2\r\n                                        setDummyState( prevState => prevState +1)\r\n                                        console.log(numberRef.current)\r\n                                     }}\r\n            > Raise Number </button>\r\n\r\n            <button onClick = { ()=> {\r\n                                        numberRef.current -=2\r\n                                        setDummyState( prevState => prevState -1)\r\n                                        console.log(numberRef.current)\r\n                                     }}\r\n            > Decrease Number </button>\r\n            <div ref={divRef} > Reference Number is equal to 100. </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HookUseRef\r\n","import React, { Component,createRef } from 'react'\r\n\r\nclass ClassCreateRef extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            dummyState : 0\r\n        }\r\n        this.divRef = createRef();\r\n        this.inputRef = createRef();\r\n        this.numberRef = createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.numberRef.current = 100;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.numberRef.current < 100 ) {\r\n            alert('numberRef.current is smaller than 100')\r\n            this.divRef.current.style.color = 'red'\r\n            this.divRef.current.innerHTML = ' Equality is broken. '\r\n        } else if  ( this.numberRef.current > 100 ) {\r\n            alert('numberRef.current is bigger than 100')\r\n            this.divRef.current.style.color = 'blue'\r\n            this.divRef.current.innerHTML = ' Equality is broken. '\r\n            this.divRef.current.style.background = 'yellow'\r\n        }  else {\r\n            // alert('numberRef.current is equal to 100')\r\n            this.divRef.current.style.color = 'pink'\r\n            this.divRef.current.innerHTML = ' Reference is equal to 100 '\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Value : {this.numberRef.current}\r\n                <br/>\r\n                <button onClick = { ()=> {\r\n                    this.numberRef.current +=2\r\n                    this.setState( {dummyState:  this.dummyState +1})\r\n                    console.log(this.numberRef.current)\r\n                 }}\r\n                > Raise Number </button>\r\n\r\n                <button onClick = { ()=> {\r\n                                    this.numberRef.current -=2\r\n                                    this.setState({dummyState: this.dummyState-1});\r\n                                    console.log(this.numberRef.current)\r\n                                }}\r\n                                > Decrease Number </button>\r\n                <div ref={this.divRef} > Reference Number is equal to 100. </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassCreateRef\r\n","import React from 'react';\nimport './App.css';\nimport HookUseRef from './components/HookUseRef';\nimport ClassCreateRef from './components/ClassCreateRef';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HookUseRef/>\n        <hr/>\n        <ClassCreateRef/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}